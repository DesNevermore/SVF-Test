TranslationUnitDecl 0xa460bd8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0xa461400 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0xa4611a0 '__int128'
|-TypedefDecl 0xa461470 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0xa4611c0 'unsigned __int128'
|-TypedefDecl 0xa461778 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0xa461550 'struct __NSConstantString_tag'
|   `-Record 0xa4614c8 '__NSConstantString_tag'
|-TypedefDecl 0xa461810 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0xa4617d0 'char *'
|   `-BuiltinType 0xa460c80 'char'
|-TypedefDecl 0xa461b08 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag[1]'
| `-ConstantArrayType 0xa461ab0 'struct __va_list_tag[1]' 1 
|   `-RecordType 0xa4618f0 'struct __va_list_tag'
|     `-Record 0xa461868 '__va_list_tag'
|-FunctionDecl 0xa4c98b0 <test1.c:1:1, line:9:1> line:1:5 used fib 'int (int)'
| |-ParmVarDecl 0xa4c97e0 <col:10, col:14> col:14 used n 'int'
| `-CompoundStmt 0xa4c9d80 <col:16, line:9:1>
|   |-IfStmt 0xa4c9a78 <line:2:5, line:4:5>
|   | |-BinaryOperator 0xa4c99f8 <line:2:9, col:11> 'int' '<'
|   | | |-ImplicitCastExpr 0xa4c99e0 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0xa4c99a0 <col:9> 'int' lvalue ParmVar 0xa4c97e0 'n' 'int'
|   | | `-IntegerLiteral 0xa4c99c0 <col:11> 'int' 0
|   | `-CompoundStmt 0xa4c9a60 <col:13, line:4:5>
|   |   `-ReturnStmt 0xa4c9a50 <line:3:9, col:17>
|   |     `-UnaryOperator 0xa4c9a38 <col:16, col:17> 'int' prefix '-'
|   |       `-IntegerLiteral 0xa4c9a18 <col:17> 'int' 1
|   |-IfStmt 0xa4c9b58 <line:5:5, line:7:5>
|   | |-BinaryOperator 0xa4c9af0 <line:5:9, col:12> 'int' '<='
|   | | |-ImplicitCastExpr 0xa4c9ad8 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0xa4c9a98 <col:9> 'int' lvalue ParmVar 0xa4c97e0 'n' 'int'
|   | | `-IntegerLiteral 0xa4c9ab8 <col:12> 'int' 1
|   | `-CompoundStmt 0xa4c9b40 <col:14, line:7:5>
|   |   `-ReturnStmt 0xa4c9b30 <line:6:9, col:16>
|   |     `-IntegerLiteral 0xa4c9b10 <col:16> 'int' 1
|   `-ReturnStmt 0xa4c9d70 <line:8:5, col:28>
|     `-BinaryOperator 0xa4c9d50 <col:12, col:28> 'int' '+'
|       |-CallExpr 0xa4c9c50 <col:12, col:19> 'int'
|       | |-ImplicitCastExpr 0xa4c9c38 <col:12> 'int (*)(int)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0xa4c9b78 <col:12> 'int (int)' Function 0xa4c98b0 'fib' 'int (int)'
|       | `-BinaryOperator 0xa4c9bf0 <col:16, col:18> 'int' '-'
|       |   |-ImplicitCastExpr 0xa4c9bd8 <col:16> 'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0xa4c9b98 <col:16> 'int' lvalue ParmVar 0xa4c97e0 'n' 'int'
|       |   `-IntegerLiteral 0xa4c9bb8 <col:18> 'int' 1
|       `-CallExpr 0xa4c9d28 <col:21, col:28> 'int'
|         |-ImplicitCastExpr 0xa4c9d10 <col:21> 'int (*)(int)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0xa4c9c78 <col:21> 'int (int)' Function 0xa4c98b0 'fib' 'int (int)'
|         `-BinaryOperator 0xa4c9cf0 <col:25, col:27> 'int' '-'
|           |-ImplicitCastExpr 0xa4c9cd8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0xa4c9c98 <col:25> 'int' lvalue ParmVar 0xa4c97e0 'n' 'int'
|           `-IntegerLiteral 0xa4c9cb8 <col:27> 'int' 2
`-FunctionDecl 0xa4c9e00 <line:10:1, line:15:1> line:10:5 main 'int ()'
  `-CompoundStmt 0xa4ca1e0 <col:11, line:15:1>
    |-DeclStmt 0xa4c9f40 <line:11:5, col:13>
    | `-VarDecl 0xa4c9eb8 <col:5, col:12> col:9 used a 'int' cinit
    |   `-IntegerLiteral 0xa4c9f20 <col:12> 'int' 1
    |-DeclStmt 0xa4c9ff8 <line:12:5, col:13>
    | `-VarDecl 0xa4c9f70 <col:5, col:12> col:9 used b 'int' cinit
    |   `-IntegerLiteral 0xa4c9fd8 <col:12> 'int' 2
    |-DeclStmt 0xa4ca180 <line:13:5, col:22>
    | `-VarDecl 0xa4ca028 <col:5, col:21> col:9 used c 'int' cinit
    |   `-CallExpr 0xa4ca158 <col:13, col:21> 'int'
    |     |-ImplicitCastExpr 0xa4ca140 <col:13> 'int (*)(int)' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0xa4ca090 <col:13> 'int (int)' Function 0xa4c98b0 'fib' 'int (int)'
    |     `-BinaryOperator 0xa4ca120 <col:18, col:20> 'int' '+'
    |       |-ImplicitCastExpr 0xa4ca0f0 <col:18> 'int' <LValueToRValue>
    |       | `-DeclRefExpr 0xa4ca0b0 <col:18> 'int' lvalue Var 0xa4c9eb8 'a' 'int'
    |       `-ImplicitCastExpr 0xa4ca108 <col:20> 'int' <LValueToRValue>
    |         `-DeclRefExpr 0xa4ca0d0 <col:20> 'int' lvalue Var 0xa4c9f70 'b' 'int'
    `-ReturnStmt 0xa4ca1d0 <line:14:5, col:12>
      `-ImplicitCastExpr 0xa4ca1b8 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0xa4ca198 <col:12> 'int' lvalue Var 0xa4ca028 'c' 'int'